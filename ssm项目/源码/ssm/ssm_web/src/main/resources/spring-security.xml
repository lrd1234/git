<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- <security:http auto-config="true"
                    use-expressions="false">-->   <!--http的auto-conﬁg=”true”时Spring Security自动为我们生成的
                   登陆页面-->
    <!-- intercept-url定义一个过滤规则
    pattern表示对哪些url进行权限控制，
    access属性表示在请求对应 的URL时需要什么权限，
    默认配置时它应该是一个以逗号分隔的角色列表，
    请求的用户只需拥有其中的一个角色就能成功访问对应 的URL -->
    <!--    <security:intercept-url pattern="/**"
                                access="ROLE_USER"/>-->
    <!-- auto-config配置后，
    不需要在配置下面信息
    <security:form-login /> 定义登录表单信息 <security:http-basic
    /> <security:logout /> -->
    <!-- </security:http>
     <security:authentication-manager>
         <security:authentication-provider>
             <security:user-service>
                 <security:user name="user" password="{noop}user" authorities="ROLE_USER"/>
                 <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
             </security:user-service>
         </security:authentication-provider>
     </security:authentication-manager>-->
 <!--服务器端的权限控制，第一步：开启jsr250注解的使用
    如果把这个信息放在 security中的配置  那么只能对service层进行控制
    jsr250-annotations="enabled" secured-annotations="enabled"
 -->
    <security:global-method-security  secured-annotations="enabled" />
<context:component-scan base-package="com.itcast.service.impl"/>
    <!-- 配置不过滤的资源（静态资源及登录相关） -->
    <security:http security="none" pattern="/pages/login.jsp"/>
    <security:http security="none" pattern="/pages/failer.jsp"/>
    <security:http security="none" pattern="/plugins/**"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/img/**"/>

    <security:http auto-config="true" use-expressions="false">
        <!-- 配置资料连接，表示任意路径都需要ROLE_USER权限 -->
        <security:intercept-url pattern="/**"
                                access="ROLE_USER,ROLE_ADMIN"/>
        <!-- 自定义登陆页面，login-page 自定义登陆页面
        authentication-failure-url 用户权限校验失败之 后才会跳转到这个页面，
        如果数据库中没有这个用户则不会跳转到这个页面。
                default-target-url 登陆成功后跳转的页面。
                注：登陆页面用户名固定 username，密码 password，action:login -->
        <security:form-login login-page="/pages/login.jsp"
                             login-processing-url="/login.do"
                             username-parameter="username"
                             password-parameter="password"
                             authentication-failure-url="/pages/failer.jsp"
                             default-target-url="/pages/main.jsp"/>
        <!-- 登出， invalidate-session 是否删除session logout-url：登出处理链接 logout-successurl：登出成功页面             注：登出操作 只需要链接到 logout即可登出当前用户 -->
        <security:logout invalidate-session="true"
                         logout-url="/logout.do"
                         logout-success-url="/pages/login.jsp"/>
        <!-- 关闭CSRF,默认是开启的 ，跨域请求-->
        <security:csrf disabled="true"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider
                user-service-ref="userService">
             <!--配置加密的方式 -->
                <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--加密类  使用的算法是：bcrypt、-->
    <bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="passwordEncoder"/>
    <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />
</beans>
